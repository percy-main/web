---
import { getCollection } from "astro:content";
import Logo from "./Logo.astro";
const { pathname } = Astro.url;

const sports = await getCollection("sport");
const sportMenu = sports.map((sport) => ({
  name: sport.data.title,
  url: `/sports/${sport.data.slug}`,
}));

const pages = await getCollection("page");
const pagesMenu = pages.map((page) => ({
  name: page.data.title,
  url: `/${page.data.slug}`,
}));

type MenuItem = {
  name: string;
  url: string;
  children?: Array<Omit<MenuItem, "children">>;
};

const menu: MenuItem[] = [
  {
    name: "Home",
    url: "/",
  },
  ...pagesMenu,
  {
    name: "Sports",
    url: "",
    children: sportMenu,
  },
];
---

<header class="sticky top-0 z-50 py-6 transition-all duration-300 bg-body">
  <nav class="relative flex flex-wrap items-center justify-between container">
    <div class="order-0">
      <Logo />
    </div>

    <h1 class="text-h3 hidden lg:block">Percy Main Cricket and Sports Club</h1>

    <input id="nav-toggle" type="checkbox" class="hidden peer" />
    <label
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden peer-checked:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1 peer-checked:flex peer-checked:lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>

    <ul
      class="text-center lg:text-left order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2 peer-checked:block peer-checked:lg:flex"
    >
      {
        menu.map((item) => (
          <>
            {Array.isArray(item.children) ? (
              <li class="mr-0 group relative cursor-pointer dropdown-button">
                <div class="flex p-3 py-2 text-[15px] text-dark transition hover:text-primary md:px-2 items-center justify-center">
                  {item.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </div>
                {item.children
                  ?.map(({ url }) => `${url}/`)
                  .includes(pathname) && (
                  <div class="left-2 right-2 h-0.5 bg-gradient-to-tl from-green-400 to-blue-400">
                    {" "}
                  </div>
                )}
                <ul
                  id="dropdown"
                  class="mr-0-list mx-auto hidden duration-300 lg:invisible lg:absolute lg:block lg:h-auto lg:w-[13.5rem] lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100"
                >
                  {item.children?.map((child) => (
                    <li class="mr-0-item">
                      <a
                        href={child.url}
                        class={`mr-0-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "text-primary"
                        }`}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li>
                <a
                  href={item.url}
                  class="p-3 py-2 text-[15px] text-dark transition hover:text-primary md:px-2 inline-block lg:block"
                >
                  {item.name}
                </a>
                {(pathname === `${item.url}/` || pathname === item.url) && (
                  <div class="left-2 right-2 h-0.5 bg-gradient-to-tl from-green-400 to-blue-400" />
                )}
              </li>
            )}
          </>
        ))
      }
    </ul>
  </nav>
</header>

<script is:inline>
  document.querySelectorAll(".dropdown-button").forEach((button) => {
    button.addEventListener("click", (e) => {
      const dropdown = e.target.nextElementSibling;
      dropdown.classList.toggle(
        dropdown.style === "hidden" ? "block" : "hidden"
      );
    });
  });

  //sticky header
  document.addEventListener("astro:page-load", () => {
    const header = document.querySelector(".header");
    window.addEventListener("scroll", () => {
      if (window.scrollY > 0) {
        header.classList.add("bg-white", "shadow");
      } else {
        header.classList.remove("bg-white", "shadow");
      }
    });
  });
</script>
