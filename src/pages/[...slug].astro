---
import { getCollection } from "astro:content";
import { RichText } from "@/components/RichText";
import Page from "@/layouts/Page.astro";
import _ from "lodash";

export async function getStaticPaths() {
  const pages = await getCollection("page");

  const [children, parents] = _.partition(pages, (p) => p.data.parent);

  const childSlug = (page: {
    slug: string;
    parent?: { slug: string };
  }): string => {
    if (!page.parent) {
      return page.slug;
    }

    const parent = pages.find((p) => p.data.slug === page.parent?.slug);

    if (!parent) {
      throw new Error(`Missing parent ${page.parent.slug}`);
    }

    return `${childSlug(parent.data)}/${page.slug}`;
  };

  const parentRoutes = parents.map((page) => {
    const childrenForThisPage = children.filter(
      (child) => child.data.parent?.slug === page.data.slug
    );

    const menu =
      childrenForThisPage.length === 0
        ? undefined
        : {
            title: page.data.title,
            items: childrenForThisPage
              .sort(
                (c1, c2) => (c1.data.menuOrder ?? 0) - (c2.data.menuOrder ?? 0)
              )
              .map((child) => ({
                title: child.data.title,
                link: `/${page.data.slug}/${child.data.slug}`,
                children: children
                  .filter((c) => c.data.parent?.slug === child.data.slug)
                  .map((c) => ({
                    title: c.data.title,
                    link: `/${page.data.slug}/${child.data.slug}/${c.data.slug}`,
                  })),
              })),
          };

    return {
      params: {
        slug: page.data.slug,
      },
      props: {
        page,
        menu,
      },
    };
  });

  const parentMap = _.keyBy(parentRoutes, (p) => p.params.slug);

  const childRoutes = children.map((page) => {
    const parent =
      parentMap[page.data.parent?.slug!] ??
      parentMap[
        children.find((c) => c.data.slug === page.data.parent?.slug)?.data
          .parent?.slug!
      ];

    return {
      params: {
        slug: childSlug(page.data),
      },
      props: {
        page,
        menu: parent.props.menu,
      },
    };
  });

  return [...parentRoutes, ...childRoutes];
}

const { page, menu } = Astro.props;
---

<Page
  title={page.data.title}
  slug={page.data.parent ? page.data.parent.slug : page.data.slug}
  menu={menu}
>
  <RichText document={page.data.content} page={page.data.slug} />
</Page>
