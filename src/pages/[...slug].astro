---
import { getCollection } from "astro:content";
import { RichText } from "@/components/RichText";
import Page from "@/layouts/Page.astro";
import _ from "lodash";
import LDJson from "../components/LDJson.astro";
import { urlMatch } from "../lib/util/url-match";
import { Breadcrumbs } from "astro-breadcrumbs";
import { IoChevronForward } from "react-icons/io5";

export async function getStaticPaths() {
  const pages = await getCollection("page");

  const [children, parents] = _.partition(pages, (p) => p.data.parent);

  const childSlug = (page: {
    slug: string;
    parent?: { slug: string };
  }): string => {
    if (!page.parent) {
      return page.slug;
    }

    const parent = pages.find((p) => p.data.slug === page.parent?.slug);

    if (!parent) {
      throw new Error(`Missing parent ${page.parent.slug}`);
    }

    return `${childSlug(parent.data)}/${page.slug}`;
  };

  const parentRoutes = parents.map((page) => {
    const childrenForThisPage = children.filter(
      (child) => child.data.parent?.slug === page.data.slug,
    );

    const menu =
      childrenForThisPage.length === 0
        ? undefined
        : {
            items: childrenForThisPage
              .sort(
                (c1, c2) => (c1.data.menuOrder ?? 0) - (c2.data.menuOrder ?? 0),
              )
              .map((child) => ({
                title: child.data.title,
                link: `/${page.data.slug}/${child.data.slug}`,
                children: children
                  .filter((c) => c.data.parent?.slug === child.data.slug)
                  .sort(
                    (a, b) => (a.data.menuOrder ?? 0) - (b.data.menuOrder ?? 0),
                  )
                  .map((c) => ({
                    title: c.data.title,
                    link: `/${page.data.slug}/${child.data.slug}/${c.data.slug}`,
                    parent: page,
                  })),
              })),
          };

    return {
      params: {
        slug: page.data.slug,
      },
      props: {
        page,
        menu,
      },
    };
  });

  const parentMap = _.keyBy(parentRoutes, (p) => p.params.slug);

  const childRoutes = children.map((page) => {
    const parent =
      parentMap[page.data.parent?.slug ?? "NEVER"] ??
      parentMap[
        children.find((c) => c.data.slug === page.data.parent?.slug)?.data
          .parent?.slug ?? "NEVER"
      ];

    return {
      params: {
        slug: childSlug(page.data),
      },
      props: {
        page,
        menu: parent.props.menu,
      },
    };
  });

  return [...parentRoutes, ...childRoutes];
}

const { page, menu } = Astro.props;
const { pathname } = Astro.url;
---

<Page title={page.data.title} menu={menu}>
  <LDJson slot="ldjson" content={page.data.ldjson} />

  {
    menu && (
      <aside
        slot="menu"
        class="mb-4 w-full border-b-2 border-gray-400 pb-2 sm:w-60 md:mb-0 md:border-0 md:pb-0 dark:bg-gray-50 dark:text-gray-800"
      >
        <nav class="space-y-8 text-sm">
          <div class="space-y-2">
            <di class="flex flex-col">
              {menu.items.map(({ title, link, children }) => {
                return (
                  <>
                    <a
                      href={link}
                      class="py-1"
                      class:list={[
                        urlMatch(pathname, {
                          url: link,
                          match: { start: link },
                        })
                          ? "text-bold ml-[-0.76rem] border-l-4 border-gray-500 pl-2 text-orange-900"
                          : "",
                      ]}
                    >
                      {title}
                    </a>

                    <div class="ml-4 flex flex-col">
                      {children.map(({ title, link }) => (
                        <>
                          <a
                            href={link}
                            class="py-1"
                            class:list={[
                              urlMatch(pathname, {
                                url: link,
                                match: { start: link },
                              })
                                ? "text-bold ml-[-1.76rem] border-l-4 border-gray-500 pl-4 text-orange-900"
                                : "",
                            ]}
                          >
                            <span
                              class:list={
                                urlMatch(pathname, {
                                  url: link,
                                  match: { start: link },
                                })
                                  ? ["pl-2"]
                                  : []
                              }
                            >
                              {title}
                            </span>
                          </a>
                        </>
                      ))}
                    </div>
                  </>
                );
              })}
            </di>
          </div>
        </nav>
      </aside>
    )
  }

  <div
    slot="breadcrumbs"
    class="text-h4 mb-4 [&_ol]:flex [&_ol]:items-center [&_ol]:gap-2 [&_ol>li]:flex [&_ol>li]:items-center [&_ol>li]:gap-2"
  >
    <Breadcrumbs
      linkTextFormat="capitalized"
      customizeListElements={[{ index: 0, remove: true }]}
      customizeLinks={[{ index: "last", text: page.data.title }]}
    >
      <IoChevronForward slot="separator" />
    </Breadcrumbs>
  </div>

  <div class="container flex grow flex-col">
    <RichText document={page.data.content} page={pathname} client:load />
  </div>
</Page>
