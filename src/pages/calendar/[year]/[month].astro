---
import Container from "@/layouts/Container.astro";
import type { GetStaticPaths } from "astro";
import {
  addMonths,
  compareAsc,
  formatDate,
  getDate,
  getYear,
  getMonth,
} from "date-fns";
import { generateCalendar } from "@/lib/calendar";
import { IoCalendar, IoChevronBack, IoChevronForward } from "react-icons/io5";
import { getCollection } from "astro:content";
import _ from "lodash";
import { match } from "ts-pattern";
import { Image } from "astro:assets";
import GamePreview from "../../../components/GamePreview.astro";
import EventPreview from "../../../components/EventPreview.astro";
import { Breadcrumbs } from "astro-breadcrumbs";

export const getStaticPaths = (async () => {
  const calendarItems = await getCollection("calendarItem");

  const teamOrder: Record<string, number> = {
    "1st XI": 2,
    "2nd XI": 1,
  };

  const calendarItemGroups = _.groupBy(
    calendarItems.sort(({ data: g1 }, { data: g2 }) => {
      const g1D = getDate(g1.when);
      const g2D = getDate(g2.when);

      if (g1D === g2D) {
        if (g1.type === "game" && g2.type === "game") {
          const t1 = teamOrder[g1.team] ?? 0;
          const t2 = teamOrder[g2.team] ?? 0;

          return t2 - t1;
        }

        return g1.type === "game" ? 1 : -1;
      }

      return compareAsc(g1.when, g2.when);
    }),
    (item) => `${getYear(item.data.when)}-${getMonth(item.data.when)}`
  );

  const now = new Date();
  const past12Months = Array.from(Array(12), (_, i) => addMonths(now, -i));
  const next12Months = Array.from(Array(12), (_, i) => addMonths(now, i));

  const paths = [...past12Months, ...next12Months].map((date, i, arr) => {
    const prevDate = addMonths(date, -1);
    const nextDate = addMonths(date, 1);
    const props = {
      year: formatDate(date, "yyyy"),
      month: formatDate(date, "MMMM"),
      calendar: generateCalendar(date, calendarItems),
      items: calendarItemGroups[`${getYear(date)}-${getMonth(date)}`] ?? [],
      previous:
        i === 0
          ? undefined
          : `/calendar/${formatDate(prevDate, "yyyy").toLocaleLowerCase()}/${formatDate(prevDate, "MMMM").toLocaleLowerCase()}`,
      next:
        i === arr.length - 1
          ? undefined
          : `/calendar/${formatDate(nextDate, "yyyy").toLocaleLowerCase()}/${formatDate(nextDate, "MMMM").toLocaleLowerCase()}`,
    };

    return {
      params: {
        year: props.year.toLocaleLowerCase(),
        month: props.month.toLocaleLowerCase(),
      },
      props,
    };
  });

  return paths;
}) satisfies GetStaticPaths;

const { year, month, calendar, previous, next, items } = Astro.props;
---

<Container title="Calendar">
  <div
    class="text-h4 [&_ol]:flex [&_ol]:items-center [&_ol]:gap-2 [&_ol>li]:flex [&_ol>li]:items-center [&_ol>li]:gap-2 mb-4"
    slot="breadcrumbs"
  >
    <Breadcrumbs
      linkTextFormat="capitalized"
      crumbs={[
        {
          text: "Calendar",
          href: "#",
        },
        {
          text: `${month} ${year}`,
          href: "#",
        },
      ]}
    >
      <IoChevronForward slot="separator" />
    </Breadcrumbs>
  </div>

  <section>
    <div class="w-full z-10">
      <div class="w-full max-w-7xl">
        <div class="grid grid-cols-12 gap-8 max-w-4xl xl:max-w-full">
          <div
            class="col-span-12 xl:col-span-7 px-2.5 py-5 sm:p-8 max-xl:row-start-1"
          >
            <div
              class="flex flex-col md:flex-row gap-4 items-center justify-between mb-5"
            >
              <div class="flex items-center justify-between gap-4 w-full">
                <a href={previous ?? "#"} title="Previous Month">
                  <IoChevronBack
                    className="text-gray-700 hover:text-gray-400"
                    fontSize={32}
                  />
                </a>
                <a href={next ?? "#"} title="Next Month">
                  <IoChevronForward
                    className="text-gray-700 hover:text-gray-400"
                    fontSize={32}
                  />
                </a>
              </div>
            </div>
            <div class="border-l border-t border-indigo-200 rounded-xl">
              <div
                class="grid grid-cols-7 rounded-t-3xl border-b border-indigo-200"
              >
                <div
                  class="py-3.5 border-r rounded-tl-xl border-indigo-200 bg-indigo-50 flex items-center justify-center text-sm font-medium text-indigo-600"
                >
                  Mon
                </div>
                <div
                  class="py-3.5 border-r border-indigo-200 bg-indigo-50 flex items-center justify-center text-sm font-medium text-indigo-600"
                >
                  Tue
                </div>
                <div
                  class="py-3.5 border-r border-indigo-200 bg-indigo-50 flex items-center justify-center text-sm font-medium text-indigo-600"
                >
                  Wed
                </div>
                <div
                  class="py-3.5 border-r border-indigo-200 bg-indigo-50 flex items-center justify-center text-sm font-medium text-indigo-600"
                >
                  Thu
                </div>
                <div
                  class="py-3.5 border-r border-indigo-200 bg-indigo-50 flex items-center justify-center text-sm font-medium text-indigo-600"
                >
                  Fri
                </div>
                <div
                  class="py-3.5 bg-indigo-50 flex items-center justify-center text-sm font-medium text-indigo-600"
                >
                  Sat
                </div>
                <div
                  class="py-3.5 border-r rounded-tr-xl border-indigo-200 bg-indigo-50 flex items-center justify-center text-sm font-medium text-indigo-600"
                >
                  Sun
                </div>
              </div>
              <div class="grid grid-cols-7 rounded-b-xl">
                {
                  calendar.map(({ date, isExtra, items }) => (
                    <div
                      class="flex items-start justify-between xl:aspect-square max-xl:min-h-[60px] p-3.5 border-r border-b border-indigo-200 transition-all duration-300 hover:bg-indigo-100"
                      class:list={[isExtra ? "bg-gray-50" : "bg-gray-100"]}
                    >
                      <span class="text-xs font-semibold text-gray-400">
                        {formatDate(date, "dd")}
                      </span>
                      {items.some((item) => item.data.type === "game") ? (
                        <Image
                          src="/images/cricket.png"
                          alt="Cricket Match"
                          title="Cricket Match"
                          width="24"
                          height="24"
                          loading="eager"
                          class="max-w-24 max-h-24"
                        />
                      ) : null}
                      {items.some((item) => item.data.type === "event") ? (
                        <IoCalendar title="Event" fontSize={24} />
                      ) : null}
                    </div>
                  ))
                }
              </div>
            </div>
          </div>

          <div class="col-span-12 xl:col-span-5">
            <ul class="flex gap-5 flex-col">
              {
                items.map((item) => (
                  <li class="w-full md:w-auto max-w-[20rem]">
                    <div class="bg-white rounded-none lg:rounded-lg shadow-md border p-4 mb-0 md:mb-4 h-full">
                      {match(item)
                        .with({ data: { type: "game" } }, (game) => (
                          <GamePreview game={game.data} id={game.id} />
                        ))
                        .with({ data: { type: "event" } }, (event) => (
                          <EventPreview event={event.data} id={event.id} />
                        ))
                        .exhaustive()}
                    </div>
                  </li>
                ))
              }
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>
</Container>
