---
import Container from "@/layouts/Container.astro";
import type { GetStaticPaths } from "astro";
import {
  addMonths,
  compareAsc,
  formatDate,
  getDate,
  getYear,
  getMonth,
  isSameDay,
  differenceInMonths,
} from "date-fns";
import { generateCalendar } from "@/lib/calendar";
import { IoCalendar, IoChevronBack, IoChevronForward } from "react-icons/io5";
import { getCollection } from "astro:content";
import _ from "lodash";
import { Image } from "astro:assets";
import { Breadcrumbs } from "astro-breadcrumbs";
import { PLAY_CRICKET_1XI_ID } from "astro:env/server";
import { PLAY_CRICKET_2XI_ID } from "astro:env/server";
import CalendarPreview from "../../../components/CalendarPreview.astro";

export const getStaticPaths = (async () => {
  const calendarItems = await getCollection("calendarItem");

  const teamOrder: Record<string, number> = {
    [PLAY_CRICKET_1XI_ID]: 2,
    [PLAY_CRICKET_2XI_ID]: 1,
  };

  const calendarItemGroups = _.groupBy(
    calendarItems.sort(({ data: g1 }, { data: g2 }) => {
      const g1D = getDate(g1.when);
      const g2D = getDate(g2.when);

      if (g1D === g2D) {
        if (g1.type === "game" && g2.type === "game") {
          const t1 = teamOrder[g1.team.id] ?? 0;
          const t2 = teamOrder[g2.team.id] ?? 0;

          return t2 - t1;
        }

        return g1.type === "game" ? 1 : -1;
      }

      return compareAsc(g1.when, g2.when);
    }),
    (item) => `${getYear(item.data.when)}-${getMonth(item.data.when)}`,
  );

  const now = new Date();
  const calendarStart = new Date("2024-01-01");
  const historicalMonthCount = differenceInMonths(now, calendarStart) + 1;
  const past12Months = Array.from(Array(historicalMonthCount), (_, i) =>
    addMonths(now, -i),
  ).reverse();
  const next12Months = Array.from(Array(12), (_, i) => addMonths(now, i));

  const paths = [...past12Months, ...next12Months].map((date, i, arr) => {
    const prevDate = addMonths(date, -1);
    const nextDate = addMonths(date, 1);
    const props = {
      year: formatDate(date, "yyyy"),
      month: formatDate(date, "MMMM"),
      calendar: generateCalendar(date, calendarItems),
      items: calendarItemGroups[`${getYear(date)}-${getMonth(date)}`] ?? [],
      previous:
        i === 0
          ? undefined
          : `/calendar/${formatDate(prevDate, "yyyy").toLocaleLowerCase()}/${formatDate(prevDate, "MMMM").toLocaleLowerCase()}`,
      next:
        i === arr.length - 1
          ? undefined
          : `/calendar/${formatDate(nextDate, "yyyy").toLocaleLowerCase()}/${formatDate(nextDate, "MMMM").toLocaleLowerCase()}`,
    };

    return {
      params: {
        year: props.year.toLocaleLowerCase(),
        month: props.month.toLocaleLowerCase(),
      },
      props,
    };
  });

  return paths;
}) satisfies GetStaticPaths;

const { year, month, calendar, previous, next, items } = Astro.props;
---

<Container title="Calendar">
  <div
    class="text-h4 mb-4 [&_ol]:flex [&_ol]:items-center [&_ol]:gap-2 [&_ol>li]:flex [&_ol>li]:items-center [&_ol>li]:gap-2"
    slot="breadcrumbs"
  >
    <Breadcrumbs
      linkTextFormat="capitalized"
      crumbs={[
        {
          text: "Calendar",
          href: "#",
        },
        {
          text: `${month} ${year}`,
          href: "#",
        },
      ]}
    >
      <IoChevronForward slot="separator" />
    </Breadcrumbs>
  </div>

  <section id="calendar-wrapper">
    <div class="z-10 w-full">
      <div class="w-full max-w-7xl">
        <div class="grid max-w-4xl grid-cols-12 gap-8 xl:max-w-full">
          <div
            class="col-span-12 px-2.5 py-5 max-xl:row-start-1 sm:p-8 xl:col-span-7"
          >
            <div
              class="mb-5 flex flex-col items-center justify-between gap-4 md:flex-row"
            >
              <div class="flex w-full items-center justify-between gap-4">
                <a href={previous ?? "#"} title="Previous Month">
                  <IoChevronBack
                    className="text-gray-700 hover:text-gray-400"
                    fontSize={32}
                  />
                </a>
                <a href={next ?? "#"} title="Next Month">
                  <IoChevronForward
                    className="text-gray-700 hover:text-gray-400"
                    fontSize={32}
                  />
                </a>
              </div>
            </div>
            <div class="rounded-xl border-t border-l border-indigo-200">
              <div
                class="grid grid-cols-7 rounded-t-3xl border-b border-indigo-200"
              >
                <div
                  class="flex items-center justify-center rounded-tl-xl border-r border-indigo-200 bg-indigo-50 py-3.5 text-sm font-medium text-indigo-600"
                >
                  Mon
                </div>
                <div
                  class="flex items-center justify-center border-r border-indigo-200 bg-indigo-50 py-3.5 text-sm font-medium text-indigo-600"
                >
                  Tue
                </div>
                <div
                  class="flex items-center justify-center border-r border-indigo-200 bg-indigo-50 py-3.5 text-sm font-medium text-indigo-600"
                >
                  Wed
                </div>
                <div
                  class="flex items-center justify-center border-r border-indigo-200 bg-indigo-50 py-3.5 text-sm font-medium text-indigo-600"
                >
                  Thu
                </div>
                <div
                  class="flex items-center justify-center border-r border-indigo-200 bg-indigo-50 py-3.5 text-sm font-medium text-indigo-600"
                >
                  Fri
                </div>
                <div
                  class="flex items-center justify-center bg-indigo-50 py-3.5 text-sm font-medium text-indigo-600"
                >
                  Sat
                </div>
                <div
                  class="flex items-center justify-center rounded-tr-xl border-r border-indigo-200 bg-indigo-50 py-3.5 text-sm font-medium text-indigo-600"
                >
                  Sun
                </div>
              </div>
              <div class="grid grid-cols-7 rounded-b-xl">
                {
                  calendar.map(({ date, isExtra, items }) => (
                    <button
                      id={`calendar-${formatDate(date, "dd-MM-yyyy")}`}
                      class="flex items-start justify-between border-r border-b border-indigo-200 p-3.5 transition-all duration-300 hover:bg-indigo-100 max-xl:min-h-[60px] xl:aspect-square"
                      class:list={[isExtra ? "bg-gray-50" : "bg-gray-100"]}
                    >
                      <span class="text-xs font-semibold text-gray-400">
                        {formatDate(date, "dd")}
                      </span>
                      {items.some((item) => item.data.type === "game") ? (
                        <Image
                          src="/images/cricket.png"
                          alt="Cricket Match"
                          title="Cricket Match"
                          width="24"
                          height="24"
                          loading="eager"
                          class="max-h-24 max-w-24"
                        />
                      ) : null}
                      {items.some((item) => item.data.type === "event") ? (
                        <IoCalendar title="Event" fontSize={24} />
                      ) : null}
                    </button>
                  ))
                }
              </div>
            </div>
          </div>

          <div class="col-span-12 max-h-160 overflow-auto xl:col-span-5">
            <ul class="flex flex-col">
              {
                calendar.map(({ date }) => (
                  <ul
                    id={`list-${formatDate(date, "dd-MM-yyyy")}`}
                    class="flex flex-col"
                  >
                    {items
                      .filter((g) => isSameDay(g.data.when, date))
                      .map((item) => (
                        <li>
                          <CalendarPreview id={item.id} item={item.data} />
                        </li>
                      ))}
                  </ul>
                ))
              }
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>
</Container>

<script>
  function scrollToElement(id: string) {
    const element = document.getElementById(id);

    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
    }
  }

  const links = document.querySelectorAll("button[id^='calendar-']");

  links.forEach((link) => {
    link.addEventListener("click", (event) => {
      event.preventDefault();
      const targetId = link.getAttribute("id")?.replace("calendar-", "list-");
      if (targetId) {
        scrollToElement(targetId);
      }
    });
  });
</script>
